---
source: tests/test.rs
expression: tree
---
{
  "Cargo.lock": "..",
  "Cargo.toml": "[workspace]\nmembers = [\"practice\"]\n",
  "compete.toml": "# How to manage new workspace members (\"include\" | \"exclude\" | \"focus\")\n#\n# - `skip`:    Does not modify `[workspace]`\n# - `include`: Adds the package to `workspace.members`\n# - `exclude`: Adds the package to `workspace.exclude` and create a symlink to the `compete.toml`\n# - `focus`:   Adds the package to `workspace.members` and remove the other from both of `workspace.{members, exclude}`\nnew-workspace-member = \"include\"\n\n# Path to the test file (Liquid template)\n#\n# Variables:\n#\n# - `manifest_dir`: Package directory\n# - `contest`:      Contest ID (e.g. \"abc100\")\n# - `problem`:      Problem index (e.g. \"a\", \"b\")\n#\n# Additional filters:\n#\n# - `kebabcase`: Convert to kebab case (by using the `heck` crate)\ntest-suite = \"./testcases/{{ contest }}/{{ problem | kebabcase }}.yml\"\n#test-suite = \"{{ manifest_dir }}/testcases/{{ problem | kebabcase }}.yml\"\n\n# Open files with the command (`jq` command)\n#\n# VSCode:\n#open = '[\"code\"] + (.paths | map([.src, .test_suite]) | flatten) + [\"-a\", ([(.git_workdir | select(.)), .manifest_dir] | first)]'\n# Emacs:\n#open = '[\"emacsclient\", \"-n\"] + (.paths | map([.src, .test_suite]) | flatten)'\n\n[template]\nplatform = \"atcoder\"\nmanifest = \"./cargo-compete-template/Cargo.toml\"\nsrc = \"./cargo-compete-template/src/main.rs\"\n\n#[submit-via-binary]\n#target = \"x86_64-unknown-linux-musl\"\n##cross = \"cross\"\n#strip = \"strip\"\n##upx = \"upx\"\n",
  "practice": {
    "Cargo.toml": "[package]\nname = \"problems\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[package.metadata.cargo-compete.bin]\na = { name = \"practice-a\", problem = { platform = \"atcoder\", contest = \"practice\", index = \"a\" } }\n\n[[bin]]\nname = \"practice-a\"\npath = \"src/bin/a.rs\"\n\n[dependencies]\nproconio = \"0.3.6\"\n",
    "src": {
      "bin": {
        "a.rs": "use proconio::input;\n\nfn main() {\n    input! {\n        a: u32,\n        b: u32,\n        c: u32,\n        s: String,\n    }\n\n    println!(\"{} {}\", a + b + c, s);\n}\n"
      }
    }
  },
  "testcases": {
    "practice": {
      "a.yml": "---\ntype: Batch\ntimelimit: 2s\nmatch: Lines\n\ncases:\n  - name: sample1\n    in: |\n      1\n      2 3\n      test\n    out: |\n      6 test\n  - name: sample2\n    in: |\n      72\n      128 256\n      myonmyon\n    out: |\n      456 myonmyon\n\nextend: []\n"
    }
  }
}
