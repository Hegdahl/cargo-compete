//! This code is generated by [cargo-compete](https://github.com/qryxip/cargo-compete).
//!
//! # Original source code
//!
{% capture newline %}
{% endcapture %}
{%- assign lines = code_block | rstrip | split: newline -%}
{%- for line in lines -%}
{% if line == "" %}{{ "//!" }}{% else %}{{ "//! " }}{{ line }}{% endif %}{{ newline }}
{%- endfor -%}

use std::{
    fs::{File, Permissions},
    io::{self, Write as _},
    os::unix::{fs::PermissionsExt as _, process::CommandExt as _},
    process::Command,
};

fn main() -> io::Result<()> {
    let mut file = File::create(PATH)?;
    file.write_all(&decode())?;
    file.set_permissions(Permissions::from_mode(0o755))?;
    file.sync_all()?;
    drop(file);
    Err(Command::new(PATH).exec())
}

fn decode() -> Vec<u8> {
    let mut table = [0; 256];
    for (i, &c) in b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        .iter()
        .enumerate()
    {
        table[usize::from(c)] = i as u8;
    }

    let mut acc = vec![];

    for chunk in BASE64.as_bytes().chunks(4) {
        let index0 = table[usize::from(chunk[0])];
        let index1 = table[usize::from(chunk[1])];
        let index2 = table[usize::from(chunk[2])];
        let index3 = table[usize::from(chunk[3])];
        acc.push((index0 << 2) + (index1 >> 4));
        acc.push((index1 << 4) + (index2 >> 2));
        acc.push((index2 << 6) + index3);
    }

    if BASE64.ends_with("==") {
        acc.pop();
        acc.pop();
    } else if BASE64.ends_with('=') {
        acc.pop();
    }

    acc
}

static PATH: &str = "/tmp/a.out";
static BASE64: &str = "{{base64}}";
